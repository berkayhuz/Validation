<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessToken_Invalid" xml:space="preserve">
    <value>The access token format is invalid.</value>
  </data>
  <data name="Base64_Invalid" xml:space="preserve">
    <value>The provided string is not a valid Base64-encoded value.</value>
  </data>
  <data name="ConstantValue" xml:space="preserve">
    <value>This field must be equal to '{0}'.</value>
  </data>
  <data name="CreditCard_Invalid" xml:space="preserve">
    <value>The credit card number is invalid.</value>
  </data>
  <data name="Currency_Invalid" xml:space="preserve">
    <value>The currency code is invalid or unsupported.</value>
  </data>
  <data name="DateRange_StartAfterEnd" xml:space="preserve">
    <value>Start date must be before or equal to end date.</value>
  </data>
  <data name="Date_BusinessDay" xml:space="preserve">
    <value>Date must be a business day (Monday to Friday).</value>
  </data>
  <data name="Date_Future" xml:space="preserve">
    <value>Date must be in the future.</value>
  </data>
  <data name="Date_InFuture" xml:space="preserve">
    <value> The date cannot be in the future.</value>
  </data>
  <data name="Date_InPast" xml:space="preserve">
    <value>The date cannot be in the past.</value>
  </data>
  <data name="Date_LeapYear" xml:space="preserve">
    <value>Date must be in a leap year.</value>
  </data>
  <data name="Date_Only" xml:space="preserve">
    <value>Must be a date without time.</value>
  </data>
  <data name="Date_Past" xml:space="preserve">
    <value>Date must be in the past.</value>
  </data>
  <data name="Date_Utc" xml:space="preserve">
    <value>Date must be marked as UTC.</value>
  </data>
  <data name="Date_Weekday" xml:space="preserve">
    <value>Date must be on a weekday (Monday to Friday).</value>
  </data>
  <data name="Date_Weekend" xml:space="preserve">
    <value>Date must be on a weekend (Saturday or Sunday).</value>
  </data>
  <data name="Decimal_PrecisionExceeded" xml:space="preserve">
    <value>The number exceeds allowed precision or scale.</value>
  </data>
  <data name="Dev_AlwaysInvalid" xml:space="preserve">
    <value>Always invalid for test purposes.</value>
  </data>
  <data name="Dev_AlwaysValid" xml:space="preserve">
    <value>Always valid.</value>
  </data>
  <data name="Email_Invalid" xml:space="preserve">
    <value>Invalid e-mail address.</value>
  </data>
  <data name="Enum_Invalid" xml:space="preserve">
    <value>The selected value is not a valid option.</value>
  </data>
  <data name="File_Invalid" xml:space="preserve">
    <value>Invalid file: size or format not allowed.</value>
  </data>
  <data name="Guid_Empty" xml:space="preserve">
    <value>{PropertyName} cannot be empty.</value>
  </data>
  <data name="Hex_Invalid" xml:space="preserve">
    <value>The value is not a valid hexadecimal string.</value>
  </data>
  <data name="IBAN_Invalid" xml:space="preserve">
    <value>The IBAN number is invalid.</value>
  </data>
  <data name="IpAddress_Invalid" xml:space="preserve">
    <value>The IP address format is invalid.</value>
  </data>
  <data name="Json_Invalid" xml:space="preserve">
    <value>The value is not a valid JSON string.</value>
  </data>
  <data name="Localization_InvalidCulture" xml:space="preserve">
    <value>Must be a valid culture code (e.g. en-US).</value>
  </data>
  <data name="Localization_InvalidLanguageTag" xml:space="preserve">
    <value>Must be a valid language tag (e.g. en-US, tr, fr-FR).</value>
  </data>
  <data name="Localization_InvalidTimeZone" xml:space="preserve">
    <value>Must be a valid time zone ID.</value>
  </data>
  <data name="Logic_CompareWithOther" xml:space="preserve">
    <value>This field must satisfy a comparison rule with another property.</value>
  </data>
  <data name="Logic_ConditionalRequired" xml:space="preserve">
    <value>This field is required when {0} is populated.</value>
  </data>
  <data name="Logic_ConditionalRequiredWithValue" xml:space="preserve">
    <value>This field is required when {0} is '{1}'.</value>
  </data>
  <data name="Logic_DisallowedIf" xml:space="preserve">
    <value>This field must be empty under certain conditions.</value>
  </data>
  <data name="Logic_EqualToOtherProperty" xml:space="preserve">
    <value>This field must be equal to {0}.</value>
  </data>
  <data name="Logic_MutuallyExclusiveProperties" xml:space="preserve">
    <value>Only one of the following fields must be set: {0}.</value>
  </data>
  <data name="Logic_NotEqualToOtherProperty" xml:space="preserve">
    <value>This field must not be equal to {0}.</value>
  </data>
  <data name="Logic_RequiredIf" xml:space="preserve">
    <value>This field is required under certain conditions.</value>
  </data>
  <data name="MustBeNull" xml:space="preserve">
    <value>This field must be null.</value>
  </data>
  <data name="MustNotBeNull" xml:space="preserve">
    <value>This field must not be null.</value>
  </data>
  <data name="NationalId_Invalid" xml:space="preserve">
    <value>The national ID number is invalid.</value>
  </data>
  <data name="Network_DomainName" xml:space="preserve">
    <value>Must be a valid domain name.</value>
  </data>
  <data name="Network_HostnameWithPort" xml:space="preserve">
    <value>Must be a valid hostname with port.</value>
  </data>
  <data name="Network_IPv6Address" xml:space="preserve">
    <value>Must be a valid IPv6 address.</value>
  </data>
  <data name="Number_DivisibleBy" xml:space="preserve">
    <value>Value must be divisible by {0}.</value>
  </data>
  <data name="Number_Even" xml:space="preserve">
    <value>Number must be even.</value>
  </data>
  <data name="Number_MaxDigits" xml:space="preserve">
    <value>Number must have at most {0} digits.</value>
  </data>
  <data name="Number_MinDigits" xml:space="preserve">
    <value>Number must have at least {0} digits.</value>
  </data>
  <data name="Number_MultipleOf" xml:space="preserve">
    <value>Number must be a multiple of {0}.</value>
  </data>
  <data name="Number_NotZero" xml:space="preserve">
    <value>Value must not be zero.</value>
  </data>
  <data name="Number_Odd" xml:space="preserve">
    <value>Number must be odd.</value>
  </data>
  <data name="Number_PercentageRange" xml:space="preserve">
    <value>Value must be a percentage between 0 and 100.</value>
  </data>
  <data name="Number_PowerOfTwo" xml:space="preserve">
    <value>Number must be a power of two.</value>
  </data>
  <data name="Number_Prime" xml:space="preserve">
    <value>Number must be a prime.</value>
  </data>
  <data name="Pagination_PageNumber" xml:space="preserve">
    <value>Page number must be ≥ 1.</value>
  </data>
  <data name="Pagination_PageSize" xml:space="preserve">
    <value>Page size must be between 1 and 100.</value>
  </data>
  <data name="Password_NumberRequired" xml:space="preserve">
    <value>Password must contain at least one number.</value>
  </data>
  <data name="Password_SymbolRequired" xml:space="preserve">
    <value>Password must contain at least one symbol.</value>
  </data>
  <data name="Password_UppercaseRequired" xml:space="preserve">
    <value>Password must contain at least one uppercase letter.</value>
  </data>
  <data name="Password_Weak" xml:space="preserve">
    <value>Password must include upper/lowercase letters, numbers, special characters, and be at least {minLength} characters long.</value>
  </data>
  <data name="Phone_Invalid" xml:space="preserve">
    <value>The phone number format is invalid.</value>
  </data>
  <data name="Phone_TurkishMobile" xml:space="preserve">
    <value>Must be a valid Turkish mobile phone number.</value>
  </data>
  <data name="PostalCode_Invalid" xml:space="preserve">
    <value> The postal code format is invalid.</value>
  </data>
  <data name="Regex_Invalid" xml:space="preserve">
    <value>The value does not match the required format.</value>
  </data>
  <data name="Security_Encrypted" xml:space="preserve">
    <value>Input must be in a valid encrypted format.</value>
  </data>
  <data name="Security_InvalidFileName" xml:space="preserve">
    <value>File name must not contain invalid characters.</value>
  </data>
  <data name="Security_NoHtml" xml:space="preserve">
    <value>Text must not contain HTML tags.</value>
  </data>
  <data name="Security_NoUnicodeSymbols" xml:space="preserve">
    <value>Text must not contain special Unicode symbols or emoji.</value>
  </data>
  <data name="Security_PasswordComplexity" xml:space="preserve">
    <value>Password must be at least {0} characters long and contain a letter, number, and symbol.</value>
  </data>
  <data name="Security_SqlInjectionSafe" xml:space="preserve">
    <value>Input must be safe against SQL injection.</value>
  </data>
  <data name="Security_XssSafe" xml:space="preserve">
    <value>Input must not contain potential XSS content.</value>
  </data>
  <data name="Slug_Invalid" xml:space="preserve">
    <value>The value must be a valid slug (lowercase letters, numbers, and dashes only).</value>
  </data>
  <data name="String_AlphaNumericOnly" xml:space="preserve">
    <value>Only letters and numbers are allowed.</value>
  </data>
  <data name="String_CamelCase" xml:space="preserve">
    <value>Text must be in camelCase format (e.g. exampleText).</value>
  </data>
  <data name="String_CountryCode" xml:space="preserve">
    <value>Must be a valid country code (ISO 3166-1 alpha-2).</value>
  </data>
  <data name="String_CurrencyCode" xml:space="preserve">
    <value>Must be a valid currency code (ISO 4217).</value>
  </data>
  <data name="String_EndsWith" xml:space="preserve">
    <value>The value must end with the required suffix.</value>
  </data>
  <data name="String_HexColor" xml:space="preserve">
    <value>Must be a valid hex color code (e.g. #FFF or #FFFFFF).</value>
  </data>
  <data name="String_Hostname" xml:space="preserve">
    <value>Must be a valid hostname.</value>
  </data>
  <data name="String_JwtToken" xml:space="preserve">
    <value>Must be a valid JWT token.</value>
  </data>
  <data name="String_KebabCase" xml:space="preserve">
    <value>Text must be in kebab-case format (e.g. example-text).</value>
  </data>
  <data name="String_LanguageCode" xml:space="preserve">
    <value>Must be a valid language code (ISO 639-1).</value>
  </data>
  <data name="String_Lowercase" xml:space="preserve">
    <value>Text must be entirely lowercase.</value>
  </data>
  <data name="String_MacAddress" xml:space="preserve">
    <value>Must be a valid MAC address.</value>
  </data>
  <data name="String_MimeType" xml:space="preserve">
    <value>Must be a valid MIME type (e.g. image/png).</value>
  </data>
  <data name="String_NoSpecialCharacters" xml:space="preserve">
    <value>Must not contain special characters.</value>
  </data>
  <data name="String_NoWhitespace" xml:space="preserve">
    <value>The value must not contain any whitespace characters.</value>
  </data>
  <data name="String_OnlyLetters" xml:space="preserve">
    <value>This field must contain only letters.</value>
  </data>
  <data name="String_OnlyLetters_Optional" xml:space="preserve">
    <value>If not empty, must contain only letters and spaces.</value>
  </data>
  <data name="String_PascalCase" xml:space="preserve">
    <value>Text must be in PascalCase format (e.g. ExampleText).</value>
  </data>
  <data name="String_SpecialCharRequired" xml:space="preserve">
    <value>The value must contain at least one special character.</value>
  </data>
  <data name="String_StartsWith" xml:space="preserve">
    <value> The value must start with the required prefix.</value>
  </data>
  <data name="String_StartsWithUppercase" xml:space="preserve">
    <value>This field must start with an uppercase letter.</value>
  </data>
  <data name="String_TrimmedEmpty" xml:space="preserve">
    <value>This field cannot be empty or whitespace.</value>
  </data>
  <data name="String_Uppercase" xml:space="preserve">
    <value>Text must be entirely uppercase.</value>
  </data>
  <data name="String_Version" xml:space="preserve">
    <value>Must be a valid version format (e.g. 1.0.0).</value>
  </data>
  <data name="Time_Range" xml:space="preserve">
    <value>Time must be between {0} and {1}.</value>
  </data>
  <data name="Url_Instagram" xml:space="preserve">
    <value>Must be a valid Instagram URL.</value>
  </data>
  <data name="Url_Invalid" xml:space="preserve">
    <value>The URL format is invalid. Only HTTP and HTTPS URLs are allowed.</value>
  </data>
  <data name="Url_YouTube" xml:space="preserve">
    <value>Must be a valid YouTube URL.</value>
  </data>
  <data name="Xml_Invalid" xml:space="preserve">
    <value>The value is not a valid XML string.</value>
  </data>
</root>